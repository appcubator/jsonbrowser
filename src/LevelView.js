// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require, exports, module) {
    var LevelView, ListElementView, util;
    require('jquery-ui');
    util = require('util');
    ListElementView = require('./ListElementView');
    LevelView = (function() {
      var currentKey, liViews;

      liViews = {};

      currentKey = null;

      function LevelView(title, curObj, parentObj, parentPath, level) {
        this.title = title;
        this.curObj = curObj;
        this.parentObj = parentObj;
        this.parentPath = parentPath;
        this.level = level;
        this.newNameFormSubmitted = __bind(this.newNameFormSubmitted, this);
        this.clickedAddNew = __bind(this.clickedAddNew, this);
        this.getLiView = __bind(this.getLiView, this);
        this.clickedAddMore = __bind(this.clickedAddMore, this);
        this.sorted = __bind(this.sorted, this);
        this.setKeys();
        if (util.isRootPath(this.parentPath)) {
          this.currentPath = title;
        } else {
          this.currentPath = parentPath + "." + title;
        }
        this.level = level || 0;
      }

      LevelView.prototype.setKeys = function() {
        return this.keys = null;
      };

      LevelView.prototype.render = function(rerender) {
        var key, levelEl, liEl, liView, _i, _len, _ref;
        manager.highlightPrevKey(this.level, this.title);
        if (!rerender) {
          levelEl = document.createElement('ul');
          levelEl.className = "level one";
          this.domEl = levelEl;
          document.body.appendChild(this.domEl);
        } else {
          this.setKeys();
          this.domEl.innerHTML = '';
        }
        liEl = document.createElement('li');
        liEl.className = 'title';
        liEl.innerHTML = this.title;
        this.domEl.appendChild(liEl);
        _ref = this.keys || [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          liView = new ListElementView(this.currentPath, key, this.curObj, this.level);
          liViews[key] = liView;
          liEl = liView.render();
          this.domEl.appendChild(liEl);
        }
        $(this.domEl).sortable({
          "stop": this.sorted,
          "placeholder": "ui-sortable-placeholder",
          "cancel": ".add-new, .title"
        });
        $(this.domEl).append(["<li class='add-new' data-type='object'><span class='icon object'></span>New Object</li>", "<li class='add-new' data-type='array'><span class='icon array'></span>New Array</li>", "<li class='add-new' data-type='string'><span class='icon string'></span>New String</li>", "<li class='add-new' data-type='number'><span class='icon number'></span>New Number</li>"].join('\n'));
        $(this.domEl).find('.add-new').on('click', (function(_this) {
          return function(e) {
            return _this.clickedAddNew(e);
          };
        })(this));
        return this.domEl;
      };

      LevelView.prototype.sorted = function() {
        return console.log("sorted");
      };

      LevelView.prototype.clickedAddMore = function() {
        return $(this.domEl).find('.add-more').html(str);
      };

      LevelView.prototype.getLiView = function(key) {
        return liViews[key];
      };

      LevelView.prototype.clickedAddNew = function(e) {
        var type;
        type = e.currentTarget.dataset.type;
        return this.showKeyInput(type);
      };

      LevelView.prototype.showKeyInput = function(type) {
        var newName;
        $(this.domEl).find('.add-new').hide();
        $(this.domEl).append("<li class='new-item-line'><form class='new-name-form'><input class='name-input' type='text'></input></form></li>");
        newName = $(this.domEl).find('.name-input').focus();
        return $(this.domEl).find('.new-name-form').on('submit', (function(_this) {
          return function(e) {
            return _this.newNameFormSubmitted(e, type);
          };
        })(this));
      };

      LevelView.prototype.newNameFormSubmitted = function(e, type) {
        var newName;
        e.preventDefault();
        newName = $(this.domEl).find('.name-input').val();
        this.addNewValue(newName, type);
        return $(this.domEl).find('.new-item-line').remove();
      };

      LevelView.prototype.addNewValue = function(key, valueType) {
        switch (valueType) {
          case "object":
            this.curObj[key] = {};
            break;
          case "string":
            this.curObj[key] = "default";
            break;
          case "array":
            this.curObj[key] = ["1"];
            break;
          case "number":
            this.curObj[key] = 0;
        }
        return this.render(true);
      };

      LevelView.prototype.highlightKey = function(keyToSelect) {
        var key, newSelectedLiView, val;
        for (key in liViews) {
          val = liViews[key];
          val.unhighlight();
          val.disableEditKeyMode();
        }
        if (this.selectedLiView) {
          this.selectedLiView.unhighlight();
        }
        newSelectedLiView = liViews[keyToSelect];
        newSelectedLiView.highlight();
        currentKey = keyToSelect;
        return this.selectedLiView = newSelectedLiView;
      };

      LevelView.prototype.highlightKeys = function(keys) {
        var key, keyToHighlight, val, _i, _len, _results;
        for (key in liViews) {
          val = liViews[key];
          val.unhighlight();
          val.disableEditKeyMode();
        }
        if (this.selectedLiView) {
          this.selectedLiView.unhighlight();
        }
        _results = [];
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          keyToHighlight = keys[_i];
          _results.push(liViews[keyToHighlight].highlight());
        }
        return _results;
      };

      LevelView.prototype.navigateUp = function() {
        var curInd;
        if (currentKey === null) {
          currentKey = this.keys[this.keys.length - 1];
        } else {
          curInd = this.keys.indexOf(currentKey);
          currentKey = this.keys[curInd - 1];
        }
        return manager.navigateToKey(currentKey, this.parentPath, this.level);
      };

      LevelView.prototype.navigateDown = function() {
        var curInd;
        if (currentKey === null) {
          currentKey = this.keys[0];
        } else {
          curInd = this.keys.indexOf(currentKey);
          currentKey = this.keys[curInd + 1];
        }
        return manager.navigateToKey(currentKey, this.parentPath, this.level);
      };

      LevelView.prototype.remove = function() {
        return $(this.domEl).remove();
      };

      return LevelView;

    })();
    return LevelView;
  });

}).call(this);
