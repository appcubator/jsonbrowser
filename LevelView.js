// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require, exports, module) {
    var LevelView, ListElementView, util;
    util = require('util');
    ListElementView = require('./ListElementView');
    LevelView = (function() {
      var liViews;

      liViews = {};

      function LevelView(keys, title, curObj, parentObj, parentPath, level) {
        this.keys = keys;
        this.title = title;
        this.curObj = curObj;
        this.parentObj = parentObj;
        this.parentPath = parentPath;
        this.level = level;
        this.newNameFormSubmitted = __bind(this.newNameFormSubmitted, this);
        this.clickedAddNew = __bind(this.clickedAddNew, this);
        this.clickedAddMore = __bind(this.clickedAddMore, this);
        if (util.isRootPath(this.parentPath)) {
          this.currentPath = title;
        } else {
          this.currentPath = parentPath + "." + title;
        }
        this.level = level || 0;
      }

      LevelView.prototype.render = function() {
        var key, levelEl, liEl, liView, _i, _len, _ref;
        manager.highlightPrevKey(this.level, this.title);
        levelEl = document.createElement('ul');
        levelEl.className = "level one";
        liEl = document.createElement('li');
        liEl.className = 'title';
        liEl.innerHTML = this.title;
        levelEl.appendChild(liEl);
        _ref = this.keys || [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          liView = new ListElementView(this.currentPath, key, this.curObj, this.level);
          liViews[key] = liView;
          liEl = liView.render();
          levelEl.appendChild(liEl);
        }
        liEl = document.createElement('li');
        liEl.className = 'add-more';
        liEl.innerHTML = '<div>+ Add Value</div>';
        levelEl.appendChild(liEl);
        document.body.appendChild(levelEl);
        this.domEl = levelEl;
        $(this.domEl).find('.add-more').one('click', this.clickedAddMore);
        return this.domEl;
      };

      LevelView.prototype.rerender = function() {
        var key, liEl, liView, _i, _len, _ref;
        this.keys = _.keys(this.curObj);
        this.domEl.innerHTML = '';
        liEl = document.createElement('li');
        liEl.className = 'title';
        liEl.innerHTML = this.title;
        this.domEl.appendChild(liEl);
        _ref = this.keys || [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          liView = new ListElementView(this.currentPath, key, this.curObj, this.level);
          liViews[key] = liView;
          liEl = liView.render();
          this.domEl.appendChild(liEl);
        }
        liEl = document.createElement('li');
        liEl.className = 'add-more';
        liEl.innerHTML = '<div>+ Add Value</div>';
        this.domEl.appendChild(liEl);
        $(this.domEl).find('.add-more').one('click', this.clickedAddMore);
        return this.domEl;
      };

      LevelView.prototype.clickedAddMore = function() {
        var str;
        str = ["<div class='object add-new'><span class='icon object'></span>Object</div>", "<div class='array add-new'><span class='icon array'></span>Array</div>", "<div class='string add-new'><span class='icon string'></span>String</div>", "<div class='number add-new'><span class='icon number'></span>Number</div>"].join('\n');
        $(this.domEl).find('.add-more').html(str);
        return $(this.domEl).find('.add-new').one('click', this.clickedAddNew);
      };

      LevelView.prototype.clickedAddNew = function(e) {
        var className;
        className = e.currentTarget.className;
        className = className.replace(' add-new', '');
        return this.showKeyInput(className);
      };

      LevelView.prototype.showKeyInput = function(type) {
        $(this.domEl).find('.add-more').html("<form class='new-name-form'><input class='name-input' type='text'></input></form>");
        return $(this.domEl).find('.new-name-form').on('submit', (function(_this) {
          return function(e) {
            return _this.newNameFormSubmitted(e, type);
          };
        })(this));
      };

      LevelView.prototype.newNameFormSubmitted = function(e, type) {
        var newName;
        e.preventDefault();
        newName = $(this.domEl).find('.name-input').val();
        return this.addNewValue(newName, type);
      };

      LevelView.prototype.addNewValue = function(key, valueType) {
        switch (valueType) {
          case "object":
            this.curObj[key] = {};
            break;
          case "string":
            this.curObj[key] = "default";
            break;
          case "array":
            this.curObj[key] = ["1"];
            break;
          case "number":
            this.curObj[key] = 0;
        }
        return this.rerender();
      };

      LevelView.prototype.highlightKey = function(keyToSelect) {
        var key, newSelectedLiView, val;
        for (key in liViews) {
          val = liViews[key];
          val.disableEditKeyMode();
        }
        if (this.selectedLiView) {
          this.selectedLiView.unhighlight();
        }
        newSelectedLiView = liViews[keyToSelect];
        newSelectedLiView.highlight();
        return this.selectedLiView = newSelectedLiView;
      };

      LevelView.prototype.remove = function() {
        return $(this.domEl).remove();
      };

      return LevelView;

    })();
    return LevelView;
  });

}).call(this);
